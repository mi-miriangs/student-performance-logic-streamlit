import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st
from pycaret.classification import setup, compare_models, pull

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Student Performance + L√≥gica e Conjuntos", layout="wide")

st.title("üéì Student Performance + L√≥gica & Conjuntos (Streamlit)")

# --- Carregar dataset
@st.cache_data
def load_data():
    return pd.read_csv("data/StudentsPerformance.csv")

df = load_data()

# Criar coluna "aprovado" baseada em l√≥gica proposicional
df["aprovado"] = (df["math score"] >= 60) & (df["reading score"] >= 60)

# =========================================================
# 1. TABELAS-VERDADE
# =========================================================
st.header("1Ô∏è‚É£ Tabelas-Verdade (L√≥gica Proposicional)")

col1, col2 = st.columns(2)

with col1:
    p = st.checkbox("p (ex: passou em matem√°tica)", value=True)
with col2:
    q = st.checkbox("q (ex: passou em leitura)", value=False)

# opera√ß√µes l√≥gicas
conjuncao = p and q
disjuncao = p or q
negacao_p = not p
condicional = (not p) or q  # p ‚Üí q

st.write("**Resultados:**")
st.write(f"p ‚àß q (conjun√ß√£o): {conjuncao}")
st.write(f"p ‚à® q (disjun√ß√£o): {disjuncao}")
st.write(f"¬¨p (nega√ß√£o): {negacao_p}")
st.write(f"p ‚Üí q (condicional): {condicional}")

# =========================================================
# 2. OPERA√á√ïES DE CONJUNTOS
# =========================================================
st.header("2Ô∏è‚É£ Opera√ß√µes com Conjuntos no Dataset")

aprov_math = set(df.index[df["math score"] >= 60])
aprov_read = set(df.index[df["reading score"] >= 60])

st.write(f"Aprovados em Matem√°tica: {len(aprov_math)}")
st.write(f"Aprovados em Leitura: {len(aprov_read)}")
st.write(f"Aprovados em ambos (interse√ß√£o): {len(aprov_math & aprov_read)}")
st.write(f"Aprovados em pelo menos um (uni√£o): {len(aprov_math | aprov_read)}")
st.write(f"S√≥ em matem√°tica (diferen√ßa): {len(aprov_math - aprov_read)}")
st.write(f"S√≥ em leitura (diferen√ßa): {len(aprov_read - aprov_math)}")

# =========================================================
# 3. PRODUTO CARTESIANO / FUN√á√ÉO (gr√°fico)
# =========================================================
st.header("3Ô∏è‚É£ Produto Cartesiano: Math √ó Reading")

fig, ax = plt.subplots()
sns.scatterplot(
    x="math score", y="reading score",
    hue="aprovado", data=df, palette={True: "green", False: "red"}, ax=ax
)
plt.title("Produto Cartesiano: Math vs Reading (Aprovado = Verde)")
st.pyplot(fig)

# =========================================================
# 4. MACHINE LEARNING COM PYCARET
# =========================================================
st.header("4Ô∏è‚É£ Machine Learning com PyCaret")

if st.button("üöÄ Rodar compara√ß√£o de modelos"):
    s = setup(
        data=df,
        target="aprovado",
        session_id=123,
        normalize=True,
        verbose=False,
        html=False
    )
    best = compare_models()
    results = pull()

    st.subheader("üèÜ Resultados da compara√ß√£o de modelos")
    st.dataframe(results)

    st.subheader("üîÆ Melhor modelo")
    st.write(best)
